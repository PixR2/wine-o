type Query {
    wine(winery: String!, vintage: Int!, bottleSize: Int!): Wine
}

type Mutation {
    addWine(winery: String!, varietal: String!, vintage: Int!, bottleSize: Int!): Wine
}

type Subscription {
    wineAdded: Wine!
}

type Wine {
    winery: String!
    varietal: String!
    vintage: Int!
    bottleSize: Int!

    region: String

    peak: Int
    hold: Int
    drink: Int
    taste: Int

    price: Int
}



# type Query {
#     wine(winery: String!, vintage: Int!, bottle_size: Int!): Wine
#     collection(id: ID): WineCollection
#     positions(collection_id: ID): [WinePosition]
#     me: User
# }

# type Mutation {
#     create_user(email: String!): Boolean
#     verify_email(token: String!): Boolean
#     update_user(user: User): Boolean

#     create_collection(name: String!): Boolean
#     add_position(collection_id: ID!, winery: String!, vintage: Int!, bottle_size: Int!, num_bottles: Int!, compartment: String): Boolean
#     update_position(collection_id: ID!, winery: String!, vintage: Int!, bottle_size: Int!, num_bottles: Int!, compartment: String): Boolean
# }

# type Subscription {

# }


# "Prevents access to a field if the user doesnt have the matching role"
# directive @hasRole(role: Role!) on FIELD_DEFINITION

# enum Role {
#     ADMIN
#     USER
# }


# type Wine {
#     winery: String!
#     vintage: Int!
#     bottle_size: Int!

#     region: String
#     varietal: String

#     peak: Int
#     hold: Int
#     drink: Int
#     taste: Int

#     price: Int
# }

# type WinePosition {
#     collection_id: ID!
#     compartment: String
#     wine: Wine!
#     num_bottles: Int!
# }

# type WineCollection {
#     id: ID!
#     name: String
#     owners: [User!]!
# }


# type Query {
#   todos: [Todo!]!
# }

# input NewTodo {
#   text: String!
#   userId: String!
# }

# type Mutation {
#   createTodo(input: NewTodo!): Todo!
# }