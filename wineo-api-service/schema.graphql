type Query {
    # wine(winery: String!, varietal: String!, vintage: Int!, bottleSize: Int!): Wine
    me: User!
    wine(winery: String!, varietal: String!, vintage: Int!, bottleSize: Int!): Wine
    collection(id: ID!): WineCollection
    myCollections: [WineCollection]
    positions(collectionID: ID!): [WinePosition]
}

type Mutation {
    signup(email: String!): Boolean
    verifyEmail(token: String!): Boolean
    signin(email: String!, password: String!): String
    updateUser(email: String, firstName: String, lastName: String, password: String): Boolean
    removeUser(deleteCollections: Boolean!, reason: String): Boolean

    createCollection(name: String!): ID
    updateCollection(id: ID!, name: String!): Boolean
    removeCollection(id: ID!): Boolean
    addPosition(collectionID: ID!, winery: String!, varietal: String!, vintage: Int!, bottleSize: Int!, numBottles: Int!, compartment: String): Boolean
    updatePosition(collectionID: ID!, winery: String!, varietal: String!, vintage: Int!, bottleSize: Int!, numBottles: Int!, compartment: String): Boolean
}

type Subscription {
    meChanged: User
    positionChanged(collectionID: ID!): WinePosition
}

type User {
    email: String!

    firstName: String
    lastName: String

    emailConfirmed: Boolean!
    hasPassword: Boolean!
}

type Wine {
    winery: String!
    varietal: String!
    vintage: Int!
    bottleSize: Int!

    region: String

    peak: Int
    hold: Int
    drink: Int
    taste: Int

    price: Int
}

type WineCollection {
    id: ID!
    name: String
    owner: String
    Collaborators: [String]
}

type WinePosition {
    collectionID: ID
    compartment: String
    wine: Wine
    numBottles: Int
}